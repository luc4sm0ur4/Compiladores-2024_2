# Generated from PyC.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,5,9,131,8,9,10,9,12,9,134,9,9,1,10,4,10,
        137,8,10,11,10,12,10,138,1,11,1,11,5,11,143,8,11,10,11,12,11,146,
        9,11,1,11,1,11,1,11,5,11,151,8,11,10,11,12,11,154,9,11,1,11,3,11,
        157,8,11,1,12,4,12,160,8,12,11,12,12,12,161,1,12,1,12,1,13,1,13,
        1,13,1,13,5,13,170,8,13,10,13,12,13,173,9,13,1,13,1,13,1,14,1,14,
        1,14,1,14,5,14,181,8,14,10,14,12,14,184,9,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,3,144,152,182,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,1,0,5,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,301,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,
        3,100,1,0,0,0,5,103,1,0,0,0,7,106,1,0,0,0,9,108,1,0,0,0,11,110,1,
        0,0,0,13,112,1,0,0,0,15,116,1,0,0,0,17,123,1,0,0,0,19,128,1,0,0,
        0,21,136,1,0,0,0,23,156,1,0,0,0,25,159,1,0,0,0,27,165,1,0,0,0,29,
        176,1,0,0,0,31,190,1,0,0,0,33,193,1,0,0,0,35,198,1,0,0,0,37,202,
        1,0,0,0,39,208,1,0,0,0,41,215,1,0,0,0,43,220,1,0,0,0,45,226,1,0,
        0,0,47,233,1,0,0,0,49,238,1,0,0,0,51,240,1,0,0,0,53,243,1,0,0,0,
        55,246,1,0,0,0,57,249,1,0,0,0,59,252,1,0,0,0,61,254,1,0,0,0,63,256,
        1,0,0,0,65,258,1,0,0,0,67,260,1,0,0,0,69,262,1,0,0,0,71,264,1,0,
        0,0,73,266,1,0,0,0,75,269,1,0,0,0,77,272,1,0,0,0,79,275,1,0,0,0,
        81,278,1,0,0,0,83,280,1,0,0,0,85,282,1,0,0,0,87,284,1,0,0,0,89,286,
        1,0,0,0,91,288,1,0,0,0,93,290,1,0,0,0,95,292,1,0,0,0,97,98,5,105,
        0,0,98,99,5,110,0,0,99,2,1,0,0,0,100,101,5,38,0,0,101,102,5,38,0,
        0,102,4,1,0,0,0,103,104,5,124,0,0,104,105,5,124,0,0,105,6,1,0,0,
        0,106,107,5,33,0,0,107,8,1,0,0,0,108,109,5,63,0,0,109,10,1,0,0,0,
        110,111,5,58,0,0,111,12,1,0,0,0,112,113,5,105,0,0,113,114,5,110,
        0,0,114,115,5,116,0,0,115,14,1,0,0,0,116,117,5,115,0,0,117,118,5,
        116,0,0,118,119,5,114,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,
        122,5,103,0,0,122,16,1,0,0,0,123,124,5,118,0,0,124,125,5,111,0,0,
        125,126,5,105,0,0,126,127,5,100,0,0,127,18,1,0,0,0,128,132,7,0,0,
        0,129,131,7,1,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,
        0,132,133,1,0,0,0,133,20,1,0,0,0,134,132,1,0,0,0,135,137,7,2,0,0,
        136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,
        139,22,1,0,0,0,140,144,5,34,0,0,141,143,9,0,0,0,142,141,1,0,0,0,
        143,146,1,0,0,0,144,145,1,0,0,0,144,142,1,0,0,0,145,147,1,0,0,0,
        146,144,1,0,0,0,147,157,5,34,0,0,148,152,5,39,0,0,149,151,9,0,0,
        0,150,149,1,0,0,0,151,154,1,0,0,0,152,153,1,0,0,0,152,150,1,0,0,
        0,153,155,1,0,0,0,154,152,1,0,0,0,155,157,5,39,0,0,156,140,1,0,0,
        0,156,148,1,0,0,0,157,24,1,0,0,0,158,160,7,3,0,0,159,158,1,0,0,0,
        160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,
        163,164,6,12,0,0,164,26,1,0,0,0,165,166,5,47,0,0,166,167,5,47,0,
        0,167,171,1,0,0,0,168,170,8,4,0,0,169,168,1,0,0,0,170,173,1,0,0,
        0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,
        0,174,175,6,13,0,0,175,28,1,0,0,0,176,177,5,47,0,0,177,178,5,42,
        0,0,178,182,1,0,0,0,179,181,9,0,0,0,180,179,1,0,0,0,181,184,1,0,
        0,0,182,183,1,0,0,0,182,180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,
        0,0,185,186,5,42,0,0,186,187,5,47,0,0,187,188,1,0,0,0,188,189,6,
        14,0,0,189,30,1,0,0,0,190,191,5,105,0,0,191,192,5,102,0,0,192,32,
        1,0,0,0,193,194,5,101,0,0,194,195,5,108,0,0,195,196,5,115,0,0,196,
        197,5,101,0,0,197,34,1,0,0,0,198,199,5,102,0,0,199,200,5,111,0,0,
        200,201,5,114,0,0,201,36,1,0,0,0,202,203,5,119,0,0,203,204,5,104,
        0,0,204,205,5,105,0,0,205,206,5,108,0,0,206,207,5,101,0,0,207,38,
        1,0,0,0,208,209,5,114,0,0,209,210,5,101,0,0,210,211,5,116,0,0,211,
        212,5,117,0,0,212,213,5,114,0,0,213,214,5,110,0,0,214,40,1,0,0,0,
        215,216,5,102,0,0,216,217,5,117,0,0,217,218,5,110,0,0,218,219,5,
        99,0,0,219,42,1,0,0,0,220,221,5,97,0,0,221,222,5,114,0,0,222,223,
        5,114,0,0,223,224,5,97,0,0,224,225,5,121,0,0,225,44,1,0,0,0,226,
        227,5,109,0,0,227,228,5,97,0,0,228,229,5,108,0,0,229,230,5,108,0,
        0,230,231,5,111,0,0,231,232,5,99,0,0,232,46,1,0,0,0,233,234,5,102,
        0,0,234,235,5,114,0,0,235,236,5,101,0,0,236,237,5,101,0,0,237,48,
        1,0,0,0,238,239,5,61,0,0,239,50,1,0,0,0,240,241,5,43,0,0,241,242,
        5,61,0,0,242,52,1,0,0,0,243,244,5,45,0,0,244,245,5,61,0,0,245,54,
        1,0,0,0,246,247,5,42,0,0,247,248,5,61,0,0,248,56,1,0,0,0,249,250,
        5,47,0,0,250,251,5,61,0,0,251,58,1,0,0,0,252,253,5,43,0,0,253,60,
        1,0,0,0,254,255,5,45,0,0,255,62,1,0,0,0,256,257,5,42,0,0,257,64,
        1,0,0,0,258,259,5,47,0,0,259,66,1,0,0,0,260,261,5,37,0,0,261,68,
        1,0,0,0,262,263,5,62,0,0,263,70,1,0,0,0,264,265,5,60,0,0,265,72,
        1,0,0,0,266,267,5,62,0,0,267,268,5,61,0,0,268,74,1,0,0,0,269,270,
        5,60,0,0,270,271,5,61,0,0,271,76,1,0,0,0,272,273,5,61,0,0,273,274,
        5,61,0,0,274,78,1,0,0,0,275,276,5,33,0,0,276,277,5,61,0,0,277,80,
        1,0,0,0,278,279,5,40,0,0,279,82,1,0,0,0,280,281,5,41,0,0,281,84,
        1,0,0,0,282,283,5,123,0,0,283,86,1,0,0,0,284,285,5,125,0,0,285,88,
        1,0,0,0,286,287,5,91,0,0,287,90,1,0,0,0,288,289,5,93,0,0,289,92,
        1,0,0,0,290,291,5,59,0,0,291,94,1,0,0,0,292,293,5,44,0,0,293,96,
        1,0,0,0,9,0,132,138,144,152,156,161,171,182,1,6,0,0
    ]

class PyCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    ID = 10
    NUMBER = 11
    STRING = 12
    WS = 13
    COMMENT = 14
    COMMENT_BLOCK = 15
    IF = 16
    ELSE = 17
    FOR = 18
    WHILE = 19
    RETURN = 20
    FUNC = 21
    ARRAY = 22
    MALLOC = 23
    FREE = 24
    ASSIGN = 25
    ADD_ASSIGN = 26
    SUB_ASSIGN = 27
    MULT_ASSIGN = 28
    DIV_ASSIGN = 29
    PLUS = 30
    MINUS = 31
    MULT = 32
    DIV = 33
    MOD = 34
    GT = 35
    LT = 36
    GE = 37
    LE = 38
    EQ = 39
    NEQ = 40
    LPAREN = 41
    RPAREN = 42
    LBRACE = 43
    RBRACE = 44
    LBRACK = 45
    RBRACK = 46
    SEMI = 47
    COMMA = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'in'", "'&&'", "'||'", "'!'", "'?'", "':'", "'int'", "'string'", 
            "'void'", "'if'", "'else'", "'for'", "'while'", "'return'", 
            "'func'", "'array'", "'malloc'", "'free'", "'='", "'+='", "'-='", 
            "'*='", "'/='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", 
            "'>='", "'<='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", 
            "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "COMMENT", "COMMENT_BLOCK", 
            "IF", "ELSE", "FOR", "WHILE", "RETURN", "FUNC", "ARRAY", "MALLOC", 
            "FREE", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
            "DIV_ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "MOD", "GT", "LT", 
            "GE", "LE", "EQ", "NEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "LBRACK", "RBRACK", "SEMI", "COMMA" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "ID", "NUMBER", "STRING", "WS", "COMMENT", 
                  "COMMENT_BLOCK", "IF", "ELSE", "FOR", "WHILE", "RETURN", 
                  "FUNC", "ARRAY", "MALLOC", "FREE", "ASSIGN", "ADD_ASSIGN", 
                  "SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "GT", "LT", "GE", "LE", "EQ", "NEQ", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                  "SEMI", "COMMA" ]

    grammarFileName = "PyC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


